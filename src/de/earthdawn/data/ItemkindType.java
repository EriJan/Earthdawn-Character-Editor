//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: see version control commit date
//


package de.earthdawn.data;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for itemkind_type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="itemkind_type">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="undefined"/>
 *     &lt;enumeration value="melee weapon"/>
 *     &lt;enumeration value="missile weapon"/>
 *     &lt;enumeration value="throwing weapon"/>
 *     &lt;enumeration value="ammunition"/>
 *     &lt;enumeration value="armor"/>
 *     &lt;enumeration value="shield"/>
 *     &lt;enumeration value="light"/>
 *     &lt;enumeration value="potion"/>
 *     &lt;enumeration value="salve"/>
 *     &lt;enumeration value="talisman"/>
 *     &lt;enumeration value="cloth"/>
 *     &lt;enumeration value="ring"/>
 *     &lt;enumeration value="brooch"/>
 *     &lt;enumeration value="amulet"/>
 *     &lt;enumeration value="vambrace"/>
 *     &lt;enumeration value="wand"/>
 *     &lt;enumeration value="animal"/>
 *     &lt;enumeration value="coins"/>
 *     &lt;enumeration value="gems"/>
 *     &lt;enumeration value="kit"/>
 *     &lt;enumeration value="pot"/>
 *     &lt;enumeration value="tool"/>
 *     &lt;enumeration value="instrument"/>
 *     &lt;enumeration value="food"/>
 *     &lt;enumeration value="drink"/>
 *     &lt;enumeration value="ration"/>
 *     &lt;enumeration value="mount"/>
 *     &lt;enumeration value="transport"/>
 *     &lt;enumeration value="book"/>
 *     &lt;enumeration value="paper"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "itemkind_type")
@XmlEnum
public enum ItemkindType {

    @XmlEnumValue("undefined")
    UNDEFINED("undefined"),
    @XmlEnumValue("melee weapon")
    MELEE_WEAPON("melee weapon"),
    @XmlEnumValue("missile weapon")
    MISSILE_WEAPON("missile weapon"),
    @XmlEnumValue("throwing weapon")
    THROWING_WEAPON("throwing weapon"),
    @XmlEnumValue("ammunition")
    AMMUNITION("ammunition"),
    @XmlEnumValue("armor")
    ARMOR("armor"),
    @XmlEnumValue("shield")
    SHIELD("shield"),
    @XmlEnumValue("light")
    LIGHT("light"),
    @XmlEnumValue("potion")
    POTION("potion"),
    @XmlEnumValue("salve")
    SALVE("salve"),
    @XmlEnumValue("talisman")
    TALISMAN("talisman"),
    @XmlEnumValue("cloth")
    CLOTH("cloth"),
    @XmlEnumValue("ring")
    RING("ring"),
    @XmlEnumValue("brooch")
    BROOCH("brooch"),
    @XmlEnumValue("amulet")
    AMULET("amulet"),
    @XmlEnumValue("vambrace")
    VAMBRACE("vambrace"),
    @XmlEnumValue("wand")
    WAND("wand"),
    @XmlEnumValue("animal")
    ANIMAL("animal"),
    @XmlEnumValue("coins")
    COINS("coins"),
    @XmlEnumValue("gems")
    GEMS("gems"),
    @XmlEnumValue("kit")
    KIT("kit"),
    @XmlEnumValue("pot")
    POT("pot"),
    @XmlEnumValue("tool")
    TOOL("tool"),
    @XmlEnumValue("instrument")
    INSTRUMENT("instrument"),
    @XmlEnumValue("food")
    FOOD("food"),
    @XmlEnumValue("drink")
    DRINK("drink"),
    @XmlEnumValue("ration")
    RATION("ration"),
    @XmlEnumValue("mount")
    MOUNT("mount"),
    @XmlEnumValue("transport")
    TRANSPORT("transport"),
    @XmlEnumValue("book")
    BOOK("book"),
    @XmlEnumValue("paper")
    PAPER("paper");
    private final String value;

    ItemkindType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ItemkindType fromValue(String v) {
        for (ItemkindType c: ItemkindType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
